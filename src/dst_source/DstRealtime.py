#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Fri Aug  5 20:30:11 2022@author: houda.el-mir"""import requestsimport osimport json        class DstRealTime:    '''    Extract real time data and delays from Airlabs API    '''    def __init__(self, api_key):        self.api_key = api_key        base_url = 'http://airlabs.co/api/v9/'        def get_flights(self, write_json = False):        url = self.base_url + 'flights' + '?' + 'api_key' + '=' + self.api_key        api_response = requests.get(url)                if write_json and (api_response.status_code == 200 or api_response.status_code == 201):            self.__export_json("get_flights", api_response.json())                    return api_response.json()        def get_delays(self, delay, type, iata, write_json = False):        """        Retourne les avions qui ont un retard d'au moins 30 minutes.        Il est possible de visualiser le retard au départ de l'aéroport ou bien à son arrivée            Parametres:             delay (string). Le retard en minutes (doit être supérieur à 30 minutes) Ex : 35             type (string). Le type d'information souhaitée (au départ ou bien à l'arrivée) Ex : 'arrivals ou 'departures'            iata (sting). Le code iata de la compagnie aérienne. Ex : 'LH' si l'on soihaite avoir les ingos sur les delays de la compagnie Lufthansa            Retourne:            Les infos sur le retard mais également le terminal de départ et d'arrivée (+ autres infos...)                        """        url = self.base_url + 'delays?delay=' + delay + '&type=' + type + '&airline_iata=' + iata + '&api_key=' + self.api_key        api_response = requests.get(url)                if write_json and (api_response.status_code == 200 or api_response.status_code == 201):            self.__export_json("delays_airlabs", api_response.json())                    return api_response.json()                 def get_flights_by_airline_iata(self, airline_iata,  write_json = False):              params = {                    'api_key': self.api_key,                    'airline_iata': airline_iata                 }                url = self.base_url + 'flights'        api_response = requests.get(url, params)                if write_json and (api_response.status_code == 200 or api_response.status_code == 201):            self.__export_json("get_flights_by_airline_iata" + "_" + airline_iata, api_response.json())                    return api_response.json()        def get_flight_by_flight_iata(self, flight_iata, write_json = False):            params = {                    'api_key': self.api_key,                    'flight_iata': flight_iata                 }                url = self.base_url + 'flight'        api_response = requests.get(url, params)                        if write_json and (api_response.status_code == 200 or api_response.status_code == 201):            self.__export_json("get_flights_by_filght_iata" + "_" + flight_iata, api_response.json())                    return api_response.json()           def get_delays_by_airline_iata(self, airline_iata,  write_json = False):              params = {                    'api_key': self.api_key,                    'airline_iata': airline_iata                 }                url = self.base_url + 'delays'        api_response = requests.get(url, params)                if write_json and (api_response.status_code == 200 or api_response.status_code == 201):            self.__export_json("get_delays_by_airline_iata" + "_" + airline_iata, api_response.json())                    return api_response.json()        def __export_json(self, filename, response):                json_dir_name = "tmp_json"        path = os.path.join(os.getcwd(), json_dir_name)        mode = 0o755        if not os.path.exists(json_dir_name):            os.mkdir(path, mode)        filename = path + '/' + filename  + ".json"        print ("Writing file : " + filename)        with open(filename, 'w') as f:            json.dump(response, f)        f.close()